services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: nestjs-app-dev
    restart: always
    ports:
      - '3000:3000' # Пробрасываем порт для доступа к приложению
    env_file:
      - .env
    depends_on:
      - redis
      - postgres
    command: npm run start:dev
    develop:
      watch:
        - action: sync
          path: ./src
          target: /src/src
          ignore:
            - node_modules/
        - action: rebuild
          path: package.json
    networks:
      - app-network

  ionic:
    build:
      context: ../health # путь к приложению Ionic
      dockerfile: Dockerfile.dev # файл Dockerfile для Ionic
    container_name: ionic-app
    restart: always
    ports:
      - '8100:8100' # Пробрасываем порт для доступа к приложению Ionic
    depends_on:
      - app # NestJS приложение запущено до запуска Ionic
    networks:
      - app-network
    command: ionic serve --host 0.0.0.0 --port 8100
    develop:
      watch:
        - action: sync
          path: ../health/src
          target: /app/src
          ignore:
            - node_modules/

  redis:
    image: 'redis:alpine'
    container_name: redis-server
    ports:
      - '6379:6379'
    networks:
      - app-network

  postgres:
    image: 'postgres:16-alpine'
    container_name: postgres-server
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: health
    ports:
      - '5432:5432'
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: chumachok1106@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - '8080:80'
    depends_on:
      - postgres
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:
